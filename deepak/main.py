import os
import argparse

from deepak.experiment import Experiment
from deepak.utilities import make_output_directory


def analyze(**kwargs):
    paf_fn = kwargs["aligned_reads"]
    library_fn = kwargs["library"]
    reference_fn = kwargs["reference"]
    alignment_pos = kwargs["position"]
    if kwargs["output"]:
        out_dir = make_output_directory(kwargs["output"])
    else:
        out_dir = make_output_directory(paf_fn)

    analysis = Experiment(paf_fn, reference_fn)
    analysis.library.construct(library_fn, alignment_pos)
    if kwargs["excluded"] is not None:
        with open(kwargs["excluded"]) as mut_file:
            excluded = [x.strip() for x in mut_file.readlines()]
        analysis.set_excluded_mutations(excluded)
    if kwargs["filter"] is not None:
        analysis.set_filters({"substitution": int(kwargs["filter"])})
    analysis.classify()

    analysis.export(out_dir)
    return analysis


def build_parser():
    parser = argparse.ArgumentParser(description="Analyze amplicon library data for deep mutational scan")
    parser.add_argument("reads", help="Reads aligned in .paf format generated by minimap2 with the --cs flag")
    parser.add_argument("-l", "--library", required=True,
                        help="File with each line corresponding to the sequence of a library element")
    parser.add_argument("-r", "--reference", required=True, help="Reference sequence used for alignment")
    parser.add_argument("-p", "--position", default=0, type=int,
                        help="Location of start of library sequences within reference")
    parser.add_argument("-o", "--output", default=False, help="Directory to write output files")
    parser.add_argument("-e", "--excluded", default=None,
                        help="File with each line containing the cs string of a mutation to be excluded from filtering")
    parser.add_argument("-f", "--filter", default=0, help="Max number of non-library mutations allowed")
    return parser


def check_required_files(arguments):
    if not os.path.isfile(arguments.reads):
        raise Exception("Cannot find read file: " + arguments.reads)
    if not os.path.isfile(arguments.library):
        raise Exception("Cannot find library file: " + arguments.library)
    if not os.path.isfile(arguments.reference):
        raise Exception("Cannot find reference file: " + arguments.reference)
    return


def call():
    #arg_parser = build_parser()
    #args = arg_parser.parse_args()
    #check_required_files(args)
    #analyze(aligned_reads=args.reads, library=args.library, reference=args.reference,
    #        position=args.position, output=args.output, excluded=args.excluded, filter=args.filter)
    analyze(aligned_reads="../5GAC-W1_10k.paf", library="../dms_libs/5_short.csv", reference="../deaminase.fa",
            position=54, output="../5GAC-W1_10k", excluded="../targets.txt", filter=0)


call()